import TelegramBot from 'node-telegram-bot-api';
import { Server } from 'http';
import { storage } from '../storage';
import { USER_TYPES } from '@shared/schema';

const TOKEN = process.env.TELEGRAM_BOT_TOKEN || '';
const WEBAPP_URL = process.env.WEBAPP_URL || 'https://t.me/YourBot/app';

let bot: TelegramBot | null = null;

export function setupBot(server: Server) {
  if (!TOKEN) {
    console.warn("TELEGRAM_BOT_TOKEN is not set. Bot functionality will be limited.");
    return;
  }

  try {
    bot = new TelegramBot(TOKEN, { polling: true });

    // Handle start command
    bot.onText(/\/start(?:\s+(.+))?/, async (msg, match) => {
      const chatId = msg.chat.id;
      const telegramId = msg.from?.id.toString();
      const referralCode = match?.[1]; // Get referral code if present

      if (!telegramId) {
        bot!.sendMessage(chatId, "Error processing your information. Please try again.");
        return;
      }

      try {
        // Check if user already exists
        const existingUser = await storage.getUserByTelegramId(telegramId);
        
        // Welcome message
        let welcomeText = `üëã Ho≈ü geldiniz! Arkada≈ülar edinmek ve eƒülenmek i√ßin platformumuza katƒ±lƒ±n.\n\nUygulamayƒ± kullanmak i√ßin a≈üaƒüƒ±daki butona tƒ±klayƒ±n.`;
        
        // Add a note about referral if applicable
        if (referralCode && !existingUser) {
          const referrer = await storage.getUserByReferralCode(referralCode);
          if (referrer) {
            welcomeText += `\n\nSizi davet eden: ${referrer.firstName}`;
          }
        }

        // Create URL with referral information if needed
        let appUrl = WEBAPP_URL;
        if (referralCode) {
          appUrl += `?ref=${referralCode}`;
        }
        
        // Send message with webapp button
        await bot!.sendMessage(chatId, welcomeText, {
          reply_markup: {
            inline_keyboard: [
              [{ text: "üöÄ Uygulamayƒ± A√ß", web_app: { url: appUrl } }]
            ]
          }
        });
      } catch (error) {
        console.error("Error handling /start command:", error);
        bot!.sendMessage(chatId, "Bir hata olu≈ütu. L√ºtfen daha sonra tekrar deneyin.");
      }
    });

    // Handle referral command
    bot.onText(/\/referral/, async (msg) => {
      const chatId = msg.chat.id;
      const telegramId = msg.from?.id.toString();

      if (!telegramId) {
        bot!.sendMessage(chatId, "Error processing your information. Please try again.");
        return;
      }

      try {
        // Get user
        const user = await storage.getUserByTelegramId(telegramId);
        
        if (!user) {
          bot!.sendMessage(chatId, "√ñnce kayƒ±t olmanƒ±z gerekmektedir. L√ºtfen /start komutunu kullanƒ±n.");
          return;
        }

        // Only performers can use referrals
        if (user.type !== USER_TYPES.PERFORMER) {
          bot!.sendMessage(chatId, "Referans programƒ± yalnƒ±zca ≈üovcular i√ßin kullanƒ±labilir.");
          return;
        }

        const referralLink = `https://t.me/YourBot?start=${user.referralCode}`;
        
        await bot!.sendMessage(chatId, 
          `üéÅ Referans Programƒ±\n\nArkada≈ülarƒ±nƒ±zƒ± davet edin ve her kaydolduklarƒ±nda 50 coin kazanƒ±n!\n\nSizin referans linkiniz:\n${referralLink}\n\nBu linki payla≈üarak arkada≈ülarƒ±nƒ±zƒ± davet edebilirsiniz.`);
      } catch (error) {
        console.error("Error handling /referral command:", error);
        bot!.sendMessage(chatId, "Bir hata olu≈ütu. L√ºtfen daha sonra tekrar deneyin.");
      }
    });

    // Handle balance command
    bot.onText(/\/balance/, async (msg) => {
      const chatId = msg.chat.id;
      const telegramId = msg.from?.id.toString();

      if (!telegramId) {
        bot!.sendMessage(chatId, "Error processing your information. Please try again.");
        return;
      }

      try {
        // Get user
        const user = await storage.getUserByTelegramId(telegramId);
        
        if (!user) {
          bot!.sendMessage(chatId, "√ñnce kayƒ±t olmanƒ±z gerekmektedir. L√ºtfen /start komutunu kullanƒ±n.");
          return;
        }

        await bot!.sendMessage(chatId, 
          `üí∞ Coin Bakiyeniz: ${user.coins || 0}\n\nDaha fazla coin almak veya bakiyenizi y√∂netmek i√ßin uygulamaya girebilirsiniz.`, {
          reply_markup: {
            inline_keyboard: [
              [{ text: "üöÄ Uygulamayƒ± A√ß", web_app: { url: WEBAPP_URL } }]
            ]
          }
        });
      } catch (error) {
        console.error("Error handling /balance command:", error);
        bot!.sendMessage(chatId, "Bir hata olu≈ütu. L√ºtfen daha sonra tekrar deneyin.");
      }
    });

    // Handle help command
    bot.onText(/\/help/, async (msg) => {
      const chatId = msg.chat.id;

      const helpText = `
üì± *Telegram Dating Platform Yardƒ±m*

*Kullanƒ±labilir Komutlar:*
/start - Ba≈ülatma ve kayƒ±t
/balance - Coin bakiyenizi g√∂r√ºnt√ºleyin
/referral - Referans linkinizi alƒ±n (≈ûovcular i√ßin)
/help - Bu yardƒ±m mesajƒ±nƒ± g√∂r√ºnt√ºleyin

*Hakkƒ±nda:*
Bu platformda erkek kullanƒ±cƒ±lar coin harcayarak ≈üovcu profillere mesaj atabilirler. Kadƒ±n kullanƒ±cƒ±lar hem cevap vererek, hem de referans linki ile kullanƒ±cƒ± getirerek coin kazanabilirler.

Herhangi bir sorunuz varsa l√ºtfen destek ekibimizle ileti≈üime ge√ßin.
      `;

      bot!.sendMessage(chatId, helpText, { parse_mode: 'Markdown' });
    });

    // Handle notifications for new messages
    server.on('newMessage', async (data: { recipientId: number, senderId: number, senderName: string }) => {
      try {
        const { recipientId, senderId, senderName } = data;
        
        // Get recipient
        const recipient = await storage.getUserById(recipientId);
        
        if (!recipient || !recipient.telegramId) return;
        
        // Send notification
        bot!.sendMessage(recipient.telegramId, 
          `üì© Yeni Mesaj\n\n${senderName} size bir mesaj g√∂nderdi. G√∂r√ºnt√ºlemek i√ßin uygulamayƒ± a√ßƒ±n.`, {
          reply_markup: {
            inline_keyboard: [
              [{ text: "Mesajƒ± G√∂r√ºnt√ºle", web_app: { url: WEBAPP_URL } }]
            ]
          }
        });
      } catch (error) {
        console.error("Error sending message notification:", error);
      }
    });

    console.log('Telegram bot started successfully');
  } catch (error) {
    console.error("Error setting up Telegram bot:", error);
  }
}

// Export for external use
export function getBot() {
  return bot;
}
